/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Hookdeck from "../../api/index";
import * as core from "../../core";
import { IssueStatus } from "./IssueStatus";
import { TransformationIssueAggregationKeys } from "./TransformationIssueAggregationKeys";
import { TransformationIssueReference } from "./TransformationIssueReference";
import { TransformationIssueData } from "./TransformationIssueData";

export const TransformationIssueWithData: core.serialization.ObjectSchema<
    serializers.TransformationIssueWithData.Raw,
    Hookdeck.TransformationIssueWithData
> = core.serialization.object({
    id: core.serialization.string(),
    teamId: core.serialization.property("team_id", core.serialization.string()),
    status: IssueStatus,
    openedAt: core.serialization.property("opened_at", core.serialization.date()),
    firstSeenAt: core.serialization.property("first_seen_at", core.serialization.date()),
    lastSeenAt: core.serialization.property("last_seen_at", core.serialization.date()),
    lastUpdatedBy: core.serialization.property("last_updated_by", core.serialization.string().optional()),
    dismissedAt: core.serialization.property("dismissed_at", core.serialization.date().optional()),
    autoResolvedAt: core.serialization.property("auto_resolved_at", core.serialization.date().optional()),
    mergedWith: core.serialization.property("merged_with", core.serialization.string().optional()),
    updatedAt: core.serialization.property("updated_at", core.serialization.string()),
    createdAt: core.serialization.property("created_at", core.serialization.string()),
    aggregationKeys: core.serialization.property("aggregation_keys", TransformationIssueAggregationKeys),
    reference: TransformationIssueReference,
    data: TransformationIssueData.optional(),
});

export declare namespace TransformationIssueWithData {
    interface Raw {
        id: string;
        team_id: string;
        status: IssueStatus.Raw;
        opened_at: string;
        first_seen_at: string;
        last_seen_at: string;
        last_updated_by?: string | null;
        dismissed_at?: string | null;
        auto_resolved_at?: string | null;
        merged_with?: string | null;
        updated_at: string;
        created_at: string;
        aggregation_keys: TransformationIssueAggregationKeys.Raw;
        reference: TransformationIssueReference.Raw;
        data?: TransformationIssueData.Raw | null;
    }
}
