/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Hookdeck from "../../../../../api";
import * as core from "../../../../../core";
import { SourceAllowedHttpMethod } from "../../../../types/SourceAllowedHttpMethod";
import { SourceCustomResponse } from "../../../../types/SourceCustomResponse";
import { VerificationConfig } from "../../../../types/VerificationConfig";
import { SourceAllowedHttpMethodItem } from "../../../../types/SourceAllowedHttpMethodItem";

export const SourceUpsertRequest: core.serialization.Schema<
    serializers.SourceUpsertRequest.Raw,
    Hookdeck.SourceUpsertRequest
> = core.serialization.object({
    name: core.serialization.string(),
    description: core.serialization.string().optional(),
    allowedHttpMethods: core.serialization.property("allowed_http_methods", SourceAllowedHttpMethod.optional()),
    customResponse: core.serialization.property("custom_response", SourceCustomResponse.optional()),
    verification: VerificationConfig.optional(),
});

export declare namespace SourceUpsertRequest {
    interface Raw {
        name: string;
        description?: string | null;
        allowed_http_methods?: (SourceAllowedHttpMethod.Raw | undefined) | null;
        custom_response?: SourceCustomResponse.Raw | null;
        verification?: VerificationConfig.Raw | null;
    }
}
